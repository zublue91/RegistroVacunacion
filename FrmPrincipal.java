/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectovacunaslemus;

import javax.swing.table.DefaultTableModel;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBinario = new javax.swing.JButton();
        btnArbolAVL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Elija el tipo de busqueda");

        btnBinario.setBackground(new java.awt.Color(255, 255, 204));
        btnBinario.setForeground(new java.awt.Color(0, 0, 0));
        btnBinario.setText("Arbol Binario");
        btnBinario.setBorderPainted(false);
        btnBinario.setMaximumSize(new java.awt.Dimension(586, 512));
        btnBinario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinarioActionPerformed(evt);
            }
        });

        btnArbolAVL.setBackground(new java.awt.Color(255, 255, 204));
        btnArbolAVL.setForeground(new java.awt.Color(0, 0, 0));
        btnArbolAVL.setText("Arbol Avl");
        btnArbolAVL.setBorderPainted(false);
        btnArbolAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArbolAVLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(btnBinario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnArbolAVL, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnArbolAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBinario, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(396, 396, 396))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

// Método para cargar datos desde un archivo y mostrarlos en FrmAvl
    private void cargarDatosYMostrarEnFrmAvl(File file, int numRecords, FrmAVL frmAvl) throws IOException {
        List<Object[]> data = new ArrayList<>();
        int recordsLoaded = 0; // Contador para llevar la cuenta de registros cargados

        // Capturar el tiempo de inicio
        long startTime = System.currentTimeMillis();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"))) {
            String line;
            while ((line = reader.readLine()) != null && recordsLoaded < numRecords) {
                String[] parts = line.split("\t");
                if (parts.length >= 2) {
                    String name = parts[0];
                    String dpi = parts[1];
                    data.add(new Object[]{name, dpi});
                    recordsLoaded++; // Incrementar el contador de registros cargados
                }
            }

            // Mostrar datos en FrmAvl
            frmAvl.cargarDatos(data);
            frmAvl.contarYMostrarCantidadRegistros(); // Contar y mostrar cantidad de registros

            // Capturar el tiempo de finalización y calcular el tiempo transcurrido
            long endTime = System.currentTimeMillis();
            long elapsedTime = endTime - startTime;

            // Actualizar el campo de texto txtTiempo en FrmAvl con el tiempo transcurrido en milisegundos
            frmAvl.setTiempoTranscurrido(elapsedTime);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            throw e;
        }
    }
    private void btnArbolAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArbolAVLActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto (.txt)", "txt"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            // Mostrar ventana emergente para ingresar la cantidad de registros a cargar
            String input = JOptionPane.showInputDialog(this, "Ingrese la cantidad de registros a cargar (entre 1 y 3000000):");
            if (input != null && !input.isEmpty()) {
                try {
                    int numRecords = Integer.parseInt(input);
                    if (numRecords < 1 || numRecords > 3000000) {
                        JOptionPane.showMessageDialog(this, "Por favor, ingrese un número entre 1 y 3000000.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Crear instancia de FrmAvl y cargar datos
                    FrmAVL frmAvl = new FrmAVL();
                    cargarDatosYMostrarEnFrmAvl(selectedFile, numRecords, frmAvl);
                    frmAvl.setVisible(true);

                    this.dispose(); // Cerrar el formulario actual después de cargar
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error al leer el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnArbolAVLActionPerformed

    private void btnBinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinarioActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto (.txt)", "txt"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            // Mostrar ventana emergente para ingresar la cantidad de registros a cargar
            String input = JOptionPane.showInputDialog(this, "Ingrese la cantidad de registros a cargar (entre 1 y 3000000):");
            if (input != null && !input.isEmpty()) {
                try {
                    int numRecords = Integer.parseInt(input);
                    if (numRecords < 1 || numRecords > 30000000) {
                        JOptionPane.showMessageDialog(this, "Por favor, ingrese un número entre 1 y 3000000.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Crear instancia de FrmBinarioPrincipal
                    FrmBinarioPrincipal frmBinarioPrincipal = new FrmBinarioPrincipal();

                    // Cargar datos y pasar referencia al formulario secundario
                    cargarDatosYMostrarEnFrmBinarioPrincipal(selectedFile, numRecords, frmBinarioPrincipal);
                    this.dispose(); // Cerrar FrmPrincipal después de cargar
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnBinarioActionPerformed

    //logica de frmBinario
    private void cargarDatosYMostrarEnFrmBinarioPrincipal(File file, int numRecords, FrmBinarioPrincipal frmBinarioPrincipal) {
        List<Object[]> data = new ArrayList<>();
        int recordsLoaded = 0; // Contador para llevar la cuenta de registros cargados

        // Capturar el tiempo de inicio
        long startTime = System.currentTimeMillis();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"))) {
            String line;
            while ((line = reader.readLine()) != null && recordsLoaded < numRecords) {
                String[] parts = line.split("\t");
                if (parts.length >= 2) {
                    String name = parts[0];
                    String dpi = parts[1];
                    data.add(new Object[]{name, dpi});
                    recordsLoaded++; // Incrementar el contador de registros cargados
                }
            }

            // Mostrar datos en FrmBinarioPrincipal
            frmBinarioPrincipal.mostrarDatosEnTabla(data);
            frmBinarioPrincipal.setVisible(true);

            // Contar y mostrar la cantidad de registros en la tabla
            frmBinarioPrincipal.contarYMostrarCantidadRegistros();

            // Capturar el tiempo de finalización y calcular el tiempo transcurrido
            long endTime = System.currentTimeMillis();
            long elapsedTime = endTime - startTime;

            // Actualizar el campo de texto txtTiempo en FrmBinarioPrincipal con el tiempo transcurrido en milisegundos
            frmBinarioPrincipal.setTiempoTranscurrido(elapsedTime);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArbolAVL;
    private javax.swing.JButton btnBinario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
